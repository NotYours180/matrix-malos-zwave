/*
 * Copyright 2016 <Admobilize>
 * MATRIX Labs  [http://creator.matrix.one]
 * This file is part of MATRIX Creator MALOS
 *
 * MATRIX Creator MALOS is free software: you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <fstream>
#include <iostream>
#include <set>
#include <map>
#include <string>
#include <valarray>

extern "C" {
#include <zwaveip/zw_cmd_tool.h>
}

int main(int argc, char* argv[]) {
  std::ofstream os;
  os.open("zwave_commands.proto", std::ofstream::out | std::ofstream::trunc);

  os << "// Proto generated by '" << argv[0] << "'" << std::endl
     << "// Do not edit!" << std::endl
     << std::endl;

  os << "syntax = \"proto3\";" << std::endl;
  os << "package matrix_malos;" << std::endl << std::endl;

  std::valarray<const char*> names(512);

  std::set<std::string> class_names;
  std::map<std::string, int> class_id;

  std::set<std::string> cmd_names;

  int number_of_classes = zw_cmd_tool_get_command_class_names(&names[0]);

  for (auto& class_name :
       std::valarray<const char*>(names[std::slice(0, number_of_classes, 1)])) {
    class_names.insert(std::string(class_name));
  }

  for (auto& class_name : class_names) {
    const zw_command_class* p_cmd_class =
        zw_cmd_tool_get_class_by_name(class_name.c_str());

    class_id[p_cmd_class->name] = p_cmd_class->cmd_class_number;
    int number_of_commands = zw_cmd_tool_get_cmd_names(p_cmd_class, &names[0]);

    for (auto& cmd_name : std::valarray<const char*>(
             names[std::slice(0, number_of_commands, 1)])) {
      cmd_names.insert(std::string(cmd_name));
    }
  }

  os << "message ZWaveCommand {" << std::endl;

  /* enum ClassType */
  int class_index = 0;
  os << " enum ClassType {" << std::endl;
  os << "  COMMAND_CLASS_UNDEFINED = 9999;" << std::endl;
  for (auto& class_name : class_names) {
    os << "  " << class_name << " = " << class_id[class_name] << ";"
       << std::endl;
  }
  os << "  }" << std::endl << std::endl;

  /* enum CmdType */
  int cmd_index = 0;
  os << " enum CmdType {" << std::endl;
  os << "  CMD_UNDEFINED = 9999;" << std::endl;
  for (auto& cmd_name : cmd_names) {
    os << "  " << cmd_name << " = " << ++cmd_index << ";" << std::endl;
  }
  os << "  }" << std::endl << std::endl;

  os << " ClassType zwclass = 1;" << std::endl;
  os << " CmdType cmd = 2;" << std::endl;
  os << " bytes params = 3;" << std::endl;

  os << "}" << std::endl;

  os.close();

  return 0;
}
